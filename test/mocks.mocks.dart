// Mocks generated by Mockito 5.4.4 from annotations
// in raro_test/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:raro_test/model/historico_dao.dart' as _i10;
import 'package:raro_test/model/historico_model.dart' as _i5;
import 'package:raro_test/model/vaga_dao.dart' as _i6;
import 'package:raro_test/model/vaga_model.dart' as _i3;
import 'package:raro_test/model/veiculo_dao.dart' as _i9;
import 'package:raro_test/model/veiculo_model.dart' as _i4;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVagaModel_1 extends _i1.SmartFake implements _i3.VagaModel {
  _FakeVagaModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVeiculoModel_2 extends _i1.SmartFake implements _i4.VeiculoModel {
  _FakeVeiculoModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHistoricoModel_3 extends _i1.SmartFake
    implements _i5.HistoricoModel {
  _FakeHistoricoModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VagaDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockVagaDao extends _i1.Mock implements _i6.VagaDao {
  MockVagaDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Database> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i7.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i7.Future<_i2.Database>);

  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i7.Future<int> save(_i3.VagaModel? vaga) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [vaga],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> update(_i3.VagaModel? vaga) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [vaga],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<List<_i3.VagaModel>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i7.Future<List<_i3.VagaModel>>.value(<_i3.VagaModel>[]),
      ) as _i7.Future<List<_i3.VagaModel>>);

  @override
  _i7.Future<List<_i3.VagaModel>> findAllByTipo(String? tipo) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByTipo,
          [tipo],
        ),
        returnValue: _i7.Future<List<_i3.VagaModel>>.value(<_i3.VagaModel>[]),
      ) as _i7.Future<List<_i3.VagaModel>>);

  @override
  _i7.Future<_i3.VagaModel?> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i7.Future<_i3.VagaModel?>.value(),
      ) as _i7.Future<_i3.VagaModel?>);

  @override
  _i7.Future<int?> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i3.VagaModel fromMap(Map<String, dynamic>? map) => (super.noSuchMethod(
        Invocation.method(
          #fromMap,
          [map],
        ),
        returnValue: _FakeVagaModel_1(
          this,
          Invocation.method(
            #fromMap,
            [map],
          ),
        ),
      ) as _i3.VagaModel);

  @override
  _i7.Future<List<_i3.VagaModel>> query(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i7.Future<List<_i3.VagaModel>>.value(<_i3.VagaModel>[]),
      ) as _i7.Future<List<_i3.VagaModel>>);

  @override
  _i7.Future<bool> exists(int? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [VeiculoDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockVeiculoDao extends _i1.Mock implements _i9.VeiculoDao {
  MockVeiculoDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Database> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i7.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i7.Future<_i2.Database>);

  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i7.Future<int> save(_i4.VeiculoModel? veiculo) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [veiculo],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> update(_i4.VeiculoModel? veiculo) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [veiculo],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<List<_i4.VeiculoModel>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue:
            _i7.Future<List<_i4.VeiculoModel>>.value(<_i4.VeiculoModel>[]),
      ) as _i7.Future<List<_i4.VeiculoModel>>);

  @override
  _i7.Future<List<_i4.VeiculoModel>> findAllByTipo(String? tipo) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByTipo,
          [tipo],
        ),
        returnValue:
            _i7.Future<List<_i4.VeiculoModel>>.value(<_i4.VeiculoModel>[]),
      ) as _i7.Future<List<_i4.VeiculoModel>>);

  @override
  _i7.Future<_i4.VeiculoModel?> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i7.Future<_i4.VeiculoModel?>.value(),
      ) as _i7.Future<_i4.VeiculoModel?>);

  @override
  _i7.Future<int?> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i4.VeiculoModel fromMap(Map<String, dynamic>? map) => (super.noSuchMethod(
        Invocation.method(
          #fromMap,
          [map],
        ),
        returnValue: _FakeVeiculoModel_2(
          this,
          Invocation.method(
            #fromMap,
            [map],
          ),
        ),
      ) as _i4.VeiculoModel);

  @override
  _i7.Future<List<_i4.VeiculoModel>> query(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [
            sql,
            arguments,
          ],
        ),
        returnValue:
            _i7.Future<List<_i4.VeiculoModel>>.value(<_i4.VeiculoModel>[]),
      ) as _i7.Future<List<_i4.VeiculoModel>>);

  @override
  _i7.Future<bool> exists(int? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [HistoricoDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoricoDao extends _i1.Mock implements _i10.HistoricoDao {
  MockHistoricoDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Database> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i7.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i7.Future<_i2.Database>);

  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i7.Future<int> save(_i5.HistoricoModel? historico) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [historico],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> update(_i5.HistoricoModel? historico) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [historico],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<List<_i5.HistoricoModel>> findAll({dynamic desc = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
          {#desc: desc},
        ),
        returnValue:
            _i7.Future<List<_i5.HistoricoModel>>.value(<_i5.HistoricoModel>[]),
      ) as _i7.Future<List<_i5.HistoricoModel>>);

  @override
  _i7.Future<List<_i5.HistoricoModel>> findAllByTipo(String? tipo) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByTipo,
          [tipo],
        ),
        returnValue:
            _i7.Future<List<_i5.HistoricoModel>>.value(<_i5.HistoricoModel>[]),
      ) as _i7.Future<List<_i5.HistoricoModel>>);

  @override
  _i7.Future<_i5.HistoricoModel?> findById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i7.Future<_i5.HistoricoModel?>.value(),
      ) as _i7.Future<_i5.HistoricoModel?>);

  @override
  _i7.Future<int?> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i7.Future<int?>.value(),
      ) as _i7.Future<int?>);

  @override
  _i7.Future<int> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i7.Future<int> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);

  @override
  _i5.HistoricoModel fromMap(Map<String, dynamic>? map) => (super.noSuchMethod(
        Invocation.method(
          #fromMap,
          [map],
        ),
        returnValue: _FakeHistoricoModel_3(
          this,
          Invocation.method(
            #fromMap,
            [map],
          ),
        ),
      ) as _i5.HistoricoModel);

  @override
  _i7.Future<List<_i5.HistoricoModel>> query(
    String? sql, [
    List<dynamic>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [
            sql,
            arguments,
          ],
        ),
        returnValue:
            _i7.Future<List<_i5.HistoricoModel>>.value(<_i5.HistoricoModel>[]),
      ) as _i7.Future<List<_i5.HistoricoModel>>);

  @override
  _i7.Future<bool> exists(int? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
